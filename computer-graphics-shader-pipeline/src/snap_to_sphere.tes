// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
    vec4 pos_inter = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
    vec4 normal_pos_inter = vec4(normalize(pos_inter.xyz), 1.0);
  
    if (is_moon) {
      // theta = M_PI * animation_seconds / 2
      vec4 shift = 2 * vec4(sin(M_PI * animation_seconds / 2), 0, cos(M_PI * animation_seconds / 2), 0);
      vec4 transformation = model(is_moon, animation_seconds) * normal_pos_inter + shift;
      pos_fs_in = proj * view * transformation;
      view_pos_fs_in = view * transformation;
    } else {
      pos_fs_in =  proj * view * identity() * normal_pos_inter;
      view_pos_fs_in = view * identity() * normal_pos_inter;
    }

    gl_Position = pos_fs_in;
    normal_fs_in = (transpose(inverse(view)) * transpose(inverse(model(is_moon, animation_seconds))) * normal_pos_inter).xyz;
    sphere_fs_in = normal_pos_inter.xyz;
}